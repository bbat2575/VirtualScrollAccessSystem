/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package VirtualScrollAccessSystem;

import java.sql.Connection;
import java.sql.DriverManager;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import java.nio.charset.StandardCharsets;
import java.io.File;
import java.util.Base64;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import java.util.Arrays;

public class AppTest {
    private SQLiteOperations db_test;
    private String test_url = "jdbc:sqlite:src/main/resources/db/rates_test.db";
    private String test_path = "src/test/resources/test.txt";
    private String test_path1 = "src/test/resources/test1.txt";

    // This sets up the SQL tables and database before each test to ensure that each test runs independantly from each other and does not affect the actual tables and database.
    // Initial values are also inputted into the table for testing.
    @BeforeEach
    void setup_test() {
        try {
            reset_tables();
            SQLiteConnection.INSTANCE.change_path(test_url);
            SQLiteConnection.INSTANCE.connect();
            SQLiteConnection.INSTANCE.initializeTables();

            user_table();
            scrolls_table();
            history_table();

            SQLiteOperations.INSTANCE.change_path(test_url);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    public void reset_tables() {
        String reset_user = "DROP TABLE IF EXISTS user;";
        String reset_scrolls = "DROP TABLE IF EXISTS scrolls;";
        String reset_history = "DROP TABLE IF EXISTS scrollsHistory;";

        try {
            Connection conn1 = DriverManager.getConnection(test_url);
            Statement stmt1 = conn1.createStatement();
            stmt1.execute(reset_user);
            stmt1.execute(reset_scrolls);
            stmt1.execute(reset_history);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    void user_table() {
        String insert_rates = "INSERT INTO user (phone_number, email_address, full_name, ID, username, psw, uploads, downloads) VALUES " +
                "('0421314124', 'hi@gmail.com', 'Bob', '123', 'Bob1', '1234', 0, 0)," +
                "('0441236685', 'hi1@gmail.com', 'Sam', '5', 'Sam1', '1234', 0, 0)," +
                "('0422364124', 'sadf@gmail.com', 'Blob', '1sd', 'Blob1', '1234', 0, 0)," +
                "('0441236685', 'qwrhw@gmail.com', 'Samuel', '5af', 'Samuel1', '1234', 0, 0)";
        try{
            Connection conn1 = DriverManager.getConnection(test_url);
            Statement stmt1 = conn1.createStatement();
            stmt1.executeUpdate(insert_rates);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    void history_table() {
        String insert_scrolls = "INSERT INTO scrollsHistory (title, uploads, downloads) VALUES " +
                "('hi', 3, 4)," +
                "('blob', 1, 13)," +
                "('scrolls', 0, 0)";
        try{
            Connection conn1 = DriverManager.getConnection(test_url);
            Statement stmt1 = conn1.createStatement();
            stmt1.executeUpdate(insert_scrolls);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    void scrolls_table() {
        byte[] test_blob_1 = new byte[]{1, 2, 3, 4, 5};
        byte[] test_blob_2 = new byte[]{1, 2};
        byte[] test_blob_3 = new byte[]{1, 2, 4, 5};
        byte[] test_blob_4 = new byte[]{1, 2, 5};

        String sql = "INSERT INTO scrolls (title, creator_ID, scroll_ID, date, time, file_data, scroll_of_day, password) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(test_url);
             PreparedStatement pstmt = conn.prepareStatement(sql);) {
            Date date_1 = SQLiteOperations.INSTANCE.convertJavaDateToSQL("06/10/2024");

            pstmt.setString(1, "hi");
            pstmt.setString(2, "123");
            pstmt.setInt(3, 0);
            pstmt.setDate(4, date_1);
            pstmt.setInt(5, 76473);
            pstmt.setBytes(6, test_blob_1);
            pstmt.setInt(7, 0);
            pstmt.setString(8, null);

            pstmt.executeUpdate();

            pstmt.clearParameters();
            Date date_2 = SQLiteOperations.INSTANCE.convertJavaDateToSQL("17/10/2024");

            pstmt.setString(1, "blob");
            pstmt.setString(2, "123");
            pstmt.setInt(3, 1);
            pstmt.setDate(4, date_2);
            pstmt.setInt(5, 76478);
            pstmt.setBytes(6, test_blob_2);
            pstmt.setInt(7, 0);
            pstmt.setString(8, SQLiteOperations.INSTANCE.encrypt_psw("psw"));

            pstmt.executeUpdate();

            pstmt.clearParameters();

            Date date_3 = SQLiteOperations.INSTANCE.convertJavaDateToSQL("14/10/2024");

            pstmt.setString(1, "scrolls");
            pstmt.setString(2, "123");
            pstmt.setInt(3, 2);
            pstmt.setDate(4, date_3);
            pstmt.setInt(5, 76490);
            pstmt.setBytes(6, test_blob_3);
            pstmt.setInt(7, 1);
            pstmt.setString(8, null);

            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_connect_wrong_db_path() {
        SQLiteConnection.INSTANCE.change_path("jdbc:invalid_sqlite_url");
        SQLiteConnection.INSTANCE.connect();
    }

    @Test
    void test_date_converter() {
        String input_date = "06/09/2024";
        Date expectedDate = Date.valueOf("2024-09-06");

        Date date_test_result = SQLiteOperations.INSTANCE.convertJavaDateToSQL(input_date);

        assertEquals(expectedDate, date_test_result, "The converted date should match the expected date.");
    }

    @Test
    void test_get_user_details() {
        List<String> user = SQLiteOperations.INSTANCE.get_user_details("123");
        assertEquals("0421314124", user.get(0));
        assertEquals("hi@gmail.com", user.get(1));
        assertEquals("Bob", user.get(2));
        assertEquals("Bob1", user.get(3));
        assertEquals("1234", user.get(4));
    }


    @Test
    void test_delete_user() {
        assertEquals(1, SQLiteOperations.INSTANCE.del_user("123"));
        assertEquals(2, SQLiteOperations.INSTANCE.del_user("123fas"));
    }

    @Test
    void test_insert_user() {
        try {
            assertNull(SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
            int result = SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals(1, result);
            assertEquals("123563", SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
            List<String> user = SQLiteOperations.INSTANCE.get_user_details("123563");
            assertEquals("0412123123", user.get(0));
            assertEquals("asda@gmail.com", user.get(1));
            assertEquals("Brob", user.get(2));
            assertEquals("Brob1", user.get(3));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_insert_user_exists() {
        try {
            assertNull(SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
            int result = SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals(1, result);
            result = SQLiteOperations.INSTANCE.insert_user("0412567123", "hi456@gmail.com", "Brab", "123563", "Brab1", "1234412");
            assertEquals(-1, result);
            assertEquals("123563", SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_insert_username_exists() {
        try {
            assertNull(SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
            int result = SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals(1, result);
            result = SQLiteOperations.INSTANCE.insert_user("0412567123", "hi456@gmail.com", "Brab", "fqwfw", "Brob1", "1234412");
            assertEquals(-2, result);
            assertEquals("123563", SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_change_psw() {
        try {
            SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals("123563", SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
            SQLiteOperations.INSTANCE.change_psw("2134", "123563");
            assertEquals("123563", SQLiteOperations.INSTANCE.user_login("Brob1", "2134"));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_change_psw_no_user() {
        try {
            int result = SQLiteOperations.INSTANCE.change_psw("2134", "123563");
            assertEquals(1, result);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    @Test
    void test_change_user() {
        try {
            SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals("123563", SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_all_usernames() {
        List<String> user_results = SQLiteOperations.INSTANCE.all_users_usernames();
        assertNotNull(user_results);
        assertEquals(4, user_results.size());
        assertEquals("Blob1", user_results.get(0));
        assertEquals("Bob1", user_results.get(1));
        assertEquals("Sam1", user_results.get(2));
        assertEquals("Samuel1", user_results.get(3));
    }

    @Test
    void test_get_user_upload() {
        try {
            SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals(0, SQLiteOperations.INSTANCE.get_user_uploads("Brob1"));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_get_user_downloads() {
        try {
            SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals(0, SQLiteOperations.INSTANCE.get_user_downloads("Brob1"));
        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }

    @Test
    void test_get_user_id() {
        try {
            SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals("123563", SQLiteOperations.INSTANCE.get_user_id("Brob1"));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_update_user() {
        try {
            List<String> user = SQLiteOperations.INSTANCE.get_user_details("123");
            assertEquals("0421314124", user.get(0));
            assertEquals("hi@gmail.com", user.get(1));
            assertEquals("Bob", user.get(2));
            assertEquals("Bob1", user.get(3));
            assertEquals("1234", user.get(4));
            SQLiteOperations.INSTANCE.update_user_details("123", "04123234523", "hi@gmail.com", "Bobb", "Bob1", "1234");
            user = SQLiteOperations.INSTANCE.get_user_details("123");
            assertEquals("04123234523", user.get(0));
            assertEquals("Bobb", user.get(2));
            SQLiteOperations.INSTANCE.update_user_details("123", "04123234523", "sadfasgd@gmail.com", "Bobb", "Bobb1", "1212334");
            user = SQLiteOperations.INSTANCE.get_user_details("123");
            assertEquals("sadfasgd@gmail.com", user.get(1));
            assertEquals("Bobb1", user.get(3));
            assertEquals(SQLiteOperations.INSTANCE.encrypt_psw("1212334"), user.get(4));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_update_user_username_exists() {
        try {
            List<String> user = SQLiteOperations.INSTANCE.get_user_details("123");
            assertEquals("0421314124", user.get(0));
            assertEquals("hi@gmail.com", user.get(1));
            assertEquals("Bob", user.get(2));
            assertEquals("Bob1", user.get(3));
            assertEquals("1234", user.get(4));
            int result = SQLiteOperations.INSTANCE.update_user_details("123", "04123234523", "hi@gmail.com", "Bobb", "Sam1", "1234");
            user = SQLiteOperations.INSTANCE.get_user_details("123");
            assertEquals("0421314124", user.get(0));
            assertEquals("Bob", user.get(2));
            assertEquals("Bob1", user.get(3));
            assertEquals(-2, result);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_update_user_missing() {
        try {
            List<String> user = SQLiteOperations.INSTANCE.get_user_details("123");
            assertEquals("0421314124", user.get(0));
            assertEquals("hi@gmail.com", user.get(1));
            assertEquals("Bob", user.get(2));
            assertEquals("Bob1", user.get(3));
            assertEquals("1234", user.get(4));
            int result = SQLiteOperations.INSTANCE.update_user_details("asdfasdfsadf", "04123234523", "hi@gmail.com", "Bobb", "Sam1", "1234");
            user = SQLiteOperations.INSTANCE.get_user_details("123");
            assertEquals("0421314124", user.get(0));
            assertEquals("Bob", user.get(2));
            assertEquals("Bob1", user.get(3));
            assertEquals(-1, result);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_get_scroll_downloads() {
        int downloads = SQLiteOperations.INSTANCE.get_scroll_downloads("hi");
        assertEquals(4, downloads);
    }

    @Test
    void test_get_scroll_uploads() {
        int uploads = SQLiteOperations.INSTANCE.get_scroll_uploads("hi");
        assertEquals(3, uploads);
    }

    @Test
    void test_get_scroll_psw() {
        String psw = SQLiteOperations.INSTANCE.get_scroll_psw("blob");
        assertEquals(SQLiteOperations.INSTANCE.encrypt_psw("psw"), psw);
    }

    @Test
    void test_get_scroll_creator() {
        String creator = SQLiteOperations.INSTANCE.get_creatorid("blob");
        assertEquals("123", creator);
    }

    @Test
    void test_get_scroll_psw_empty() {
        String psw = SQLiteOperations.INSTANCE.get_scroll_psw("hi");
        assertEquals(null, psw);
    }

    @Test
    void test_get_scroll_history() {
        List<String> titles = SQLiteOperations.INSTANCE.get_scroll_history_titles();
        assertEquals("hi", titles.get(0));
        assertEquals("blob", titles.get(1));
        assertEquals("scrolls", titles.get(2));
    }

    @Test
    void test_get_scroll_titles() {
        List<String> titles = SQLiteOperations.INSTANCE.get_scroll_titles();
        assertEquals("hi", titles.get(0));
        assertEquals("blob", titles.get(1));
        assertEquals("scrolls", titles.get(2));
    }

    @Test
    void test_insert_scroll() {
        SQLiteOperations.INSTANCE.insert_scroll("test", "5", test_path, "20/10/2024", "test_psw");
        SQLiteOperations.INSTANCE.insert_scroll("test2", "5", test_path1, "20/10/2024", "");

        List<String> titles = SQLiteOperations.INSTANCE.get_scroll_titles();
        assertEquals("hi", titles.get(0));
        assertEquals("blob", titles.get(1));
        assertEquals("scrolls", titles.get(2));
        assertEquals("test", titles.get(3));
        assertEquals("test2", titles.get(4));

        String psw = SQLiteOperations.INSTANCE.get_scroll_psw("test2");
        assertEquals(null, psw);
        psw = SQLiteOperations.INSTANCE.get_scroll_psw("test");
        assertEquals(SQLiteOperations.INSTANCE.encrypt_psw("test_psw"), psw);
    }

    @Test
    void test_insert_scroll_missing_file() {
        try (FileWriter writer = new FileWriter(test_path)) {
            writer.write("Hi, test test test test");
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }

        SQLiteOperations.INSTANCE.insert_scroll("test", "5", test_path, "20/10/2024", "test_psw");
        assertEquals(-2, SQLiteOperations.INSTANCE.insert_scroll("test2", "5", "asfasf.txt", "20/10/2024", ""));

        List<String> titles = SQLiteOperations.INSTANCE.get_scroll_titles();
        assertEquals("hi", titles.get(0));
        assertEquals("blob", titles.get(1));
        assertEquals("scrolls", titles.get(2));
        assertEquals("test", titles.get(3));
    }

    @Test
    void test_insert_scroll_no_user() {
        assertEquals(-2, SQLiteOperations.INSTANCE.insert_scroll("test", "dsgdsfhdsfh", test_path, "20/10/2024", "test_psw"));
    }

    @Test
    void test_del_scroll() {
        List<String> titles = SQLiteOperations.INSTANCE.get_scroll_titles();
        assertEquals("hi", titles.get(0));
        assertEquals("blob", titles.get(1));
        assertEquals("scrolls", titles.get(2));
        SQLiteOperations.INSTANCE.del_scroll("scrolls");
        titles = SQLiteOperations.INSTANCE.get_scroll_history_titles();
        assertEquals("hi", titles.get(0));
        assertEquals("blob", titles.get(1));
        assertEquals("scrolls", titles.get(2));
        titles = SQLiteOperations.INSTANCE.get_scroll_titles();
        assertEquals("hi", titles.get(0));
        assertEquals("blob", titles.get(1));
    }

    @Test
    void test_del_insert_scroll() {
        SQLiteOperations.INSTANCE.insert_scroll("test", "5", test_path, "20/10/2024", "test_psw");
        SQLiteOperations.INSTANCE.del_scroll("test");
        SQLiteOperations.INSTANCE.insert_scroll("test", "5", test_path, "20/10/2024", "test_psw");

        int result = SQLiteOperations.INSTANCE.get_scroll_uploads("test");

        assertEquals(2, result);
    }

    @Test
    void test_increment() {
        assertEquals(0, SQLiteOperations.INSTANCE.get_user_downloads("5"));
        assertEquals(13, SQLiteOperations.INSTANCE.get_scroll_downloads("blob"));
        SQLiteOperations.INSTANCE.increment_downloads("blob", "5");
        assertEquals(1, SQLiteOperations.INSTANCE.get_user_downloads("5"));
        assertEquals(14, SQLiteOperations.INSTANCE.get_scroll_downloads("blob"));
    }

    @Test
    void test_increment_no_scroll() {
        assertEquals(0, SQLiteOperations.INSTANCE.get_user_downloads("5"));
        assertEquals(-1, SQLiteOperations.INSTANCE.increment_downloads("bb", "5"));
        assertEquals(0, SQLiteOperations.INSTANCE.get_user_downloads("5"));
    }

    @Test
    void test_increment_no_user() {
        assertEquals(13, SQLiteOperations.INSTANCE.get_scroll_downloads("blob"));
        assertEquals(-4, SQLiteOperations.INSTANCE.increment_downloads("blob", "sdfasdf"));
        assertEquals(14, SQLiteOperations.INSTANCE.get_scroll_downloads("blob"));
    }

    @Test
    void test_find_scroll() {
        assertEquals("scrolls", SQLiteOperations.INSTANCE.get_scroll_of_day());
        SQLiteOperations.INSTANCE.set_scroll_day("hi");
        assertEquals("hi", SQLiteOperations.INSTANCE.get_scroll_of_day());
    }


    @Test
    void test_set_scroll_missing() {
        assertEquals("scrolls", SQLiteOperations.INSTANCE.get_scroll_of_day());
        SQLiteOperations.INSTANCE.set_scroll_day("sadfsadf");
        assertEquals(null, SQLiteOperations.INSTANCE.get_scroll_of_day());
    }

    @Test
    void test_set_random_scroll() {
        assertEquals("scrolls", SQLiteOperations.INSTANCE.get_scroll_of_day());
        SQLiteOperations.INSTANCE.set_new_scroll_day();
        assertNotNull(SQLiteOperations.INSTANCE.get_scroll_of_day());
    }

    @Test
    void test_scroll_psw() {
        assertEquals(1, SQLiteOperations.INSTANCE.access_scroll_psw("blob", "psw"));
        assertEquals(1, SQLiteOperations.INSTANCE.access_scroll_psw("hi", null));
    }

    @Test
    void test_scroll_psw_missing() {
        assertEquals(-1, SQLiteOperations.INSTANCE.access_scroll_psw("sdfsadf", "psw"));
    }

    @Test
    void test_scroll_psw_wrong() {
        assertEquals(0, SQLiteOperations.INSTANCE.access_scroll_psw("blob", "asda"));
    }

    @Test
    void test_scroll_filter_title() {
        List<String> scrolls = SQLiteOperations.INSTANCE.get_scroll_titles_filter("title", "hi");
        assertEquals(1, scrolls.size());
        assertEquals("hi", scrolls.get(0));
        SQLiteOperations.INSTANCE.insert_scroll("hi", "5", test_path, "20/10/2024", "test_psw");
        scrolls = SQLiteOperations.INSTANCE.get_scroll_titles_filter("title", "hi");
        assertEquals(2, scrolls.size());
        assertEquals("hi", scrolls.get(0));
        assertEquals("hi", scrolls.get(1));
    }

    @Test
    void test_scroll_filter_creator() {
        List<String> scrolls = SQLiteOperations.INSTANCE.get_scroll_titles_filter("creator_id", "123");
        assertEquals(3, scrolls.size());
        assertEquals("hi", scrolls.get(0));
        assertEquals("blob", scrolls.get(1));
        assertEquals("scrolls", scrolls.get(2));
    }

    @Test
    void test_scroll_filter_creator_cases() {
        List<String> scrolls = SQLiteOperations.INSTANCE.get_scroll_titles_filter("crEATor_id", "123");
        assertEquals(3, scrolls.size());
        assertEquals("hi", scrolls.get(0));
        assertEquals("blob", scrolls.get(1));
        assertEquals("scrolls", scrolls.get(2));
    }

    @Test
    void test_scroll_content() {
        SQLiteOperations.INSTANCE.insert_scroll("test", "5", test_path, "20/10/2024", "test_psw");
        String content = SQLiteOperations.INSTANCE.get_scroll_content("test");
        String expected = "Hi, test test test test";
        byte[] binary_data = expected.getBytes(StandardCharsets.UTF_8);
        String base64Encoded = Base64.getEncoder().encodeToString(binary_data);
        assertEquals(base64Encoded, content);
    }

    @Test
    void test_scroll_content_as_bytes() {
        SQLiteOperations.INSTANCE.insert_scroll("test", "5", test_path, "20/10/2024", "test_psw");
        byte[] content = SQLiteOperations.INSTANCE.get_scroll_content_as_bytes("hi");
        byte[] test_blob_1 = new byte[]{1, 2, 3, 4, 5};
        assertArrayEquals(test_blob_1, content);
    }

    @Test
    void test_scroll_filter_date() {
        List<String> scrolls = SQLiteOperations.INSTANCE.get_scroll_titles_filter("date", "06/10/2024");
        assertEquals(1, scrolls.size());
        assertEquals("hi", scrolls.get(0));
    }

    @Test
    void test_scroll_insert_day() {
        SQLiteOperations.INSTANCE.insert_scroll("test", "5", test_path, "20/10/2024", "test_psw");

        assertEquals("scrolls", SQLiteOperations.INSTANCE.get_scroll_of_day());
        SQLiteOperations.INSTANCE.set_scroll_day("test");
        assertEquals("test", SQLiteOperations.INSTANCE.get_scroll_of_day());

        SQLiteOperations.INSTANCE.del_scroll("test");
        SQLiteOperations.INSTANCE.set_new_scroll_day();
        assertNotEquals("test", SQLiteOperations.INSTANCE.get_scroll_of_day());
    }


    @Test
    void test_scroll_content_update_wrong_scroll() {
        SQLiteOperations.INSTANCE.insert_scroll("test", "5", test_path, "20/10/2024", "test_psw");

        String content = SQLiteOperations.INSTANCE.get_scroll_content("test");
        String expected = "Hi, test test test test";
        byte[] binary_data = expected.getBytes(StandardCharsets.UTF_8);
        String base64Encoded = Base64.getEncoder().encodeToString(binary_data);
        assertEquals(base64Encoded, content);

        String new_content = "hi";
        int result = SQLiteOperations.INSTANCE.update_scroll_content("tes1", new_content);
        content = SQLiteOperations.INSTANCE.get_scroll_content("test");
        assertEquals(base64Encoded, content);
        assertEquals(0, result);
    }

    @Test
    void test_new_user_insert_scrolls() {
        try {
            assertNull(SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
            int result = SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals(1, result);
            assertEquals(0, SQLiteOperations.INSTANCE.get_user_uploads("123563"));

            SQLiteOperations.INSTANCE.insert_scroll("test", "123563", test_path, "20/10/2024", "test_psw");
            SQLiteOperations.INSTANCE.insert_scroll("test1", "123563", test_path1, "20/10/2024", "test_psw");
            assertEquals(2, SQLiteOperations.INSTANCE.get_user_uploads("123563"));

            List<String> scrolls = SQLiteOperations.INSTANCE.get_scroll_titles_filter("creator_id", "123563");

            assertEquals("test", scrolls.get(0));
            assertEquals("test1", scrolls.get(1));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    // Edge case--> tests if filter will show deleted scrolls
    @Test
    void test_new_user_insert_scrolls_del_history() {
        try {
            assertNull(SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
            int result = SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals(1, result);
            assertEquals(0, SQLiteOperations.INSTANCE.get_user_uploads("123563"));

            SQLiteOperations.INSTANCE.insert_scroll("test", "123563", test_path, "20/10/2024", "test_psw");
            SQLiteOperations.INSTANCE.insert_scroll("test1", "123563", test_path1, "20/10/2024", "test_psw");
            assertEquals(2, SQLiteOperations.INSTANCE.get_user_uploads("123563"));

            List<String> scrolls = SQLiteOperations.INSTANCE.get_scroll_titles_filter("creator_id", "123563");

            assertEquals("test", scrolls.get(0));
            assertEquals("test1", scrolls.get(1));

            SQLiteOperations.INSTANCE.del_scroll("test");
            scrolls = SQLiteOperations.INSTANCE.get_scroll_titles_filter("creator_id", "123563");

            assertEquals("test1", scrolls.get(0));

            List<String> scrolls_history = SQLiteOperations.INSTANCE.get_scroll_history_titles();
            assertEquals(5, scrolls_history.size());
            assertEquals("test", scrolls_history.get(3));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_updated_user_scrolls() {
        try {
            assertNull(SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));
            int result = SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");

            SQLiteOperations.INSTANCE.insert_scroll("test", "123563", test_path, "20/10/2024", "test_psw");
            SQLiteOperations.INSTANCE.insert_scroll("test1", "123563", test_path1, "20/10/2024", "test_psw");

            List<String> scrolls = SQLiteOperations.INSTANCE.get_scroll_titles_filter("creator_id", "123563");

            assertEquals("test", scrolls.get(0));
            assertEquals("test1", scrolls.get(1));

            SQLiteOperations.INSTANCE.update_user_details("123563", "0412123123", "update@gmail.com", "Brob", "Brobnew", "new");
            scrolls = SQLiteOperations.INSTANCE.get_scroll_titles_filter("creator_id", "123563");

            assertEquals("test", scrolls.get(0));
            assertEquals("test1", scrolls.get(1));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_updated_user_login() {
        try {
            SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals("123563", SQLiteOperations.INSTANCE.user_login("Brob1", "1235"));

            SQLiteOperations.INSTANCE.update_user_details("123563", "0412123123", "update@gmail.com", "Brob", "Brobnew", "new");

            assertEquals("123563", SQLiteOperations.INSTANCE.user_login("Brobnew", "new"));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_missing_db() {
        reset_tables();
        try {
            int result = SQLiteOperations.INSTANCE.insert_user("0412123123", "asda@gmail.com", "Brob", "123563", "Brob1", "1235");
            assertEquals(0, result);

            result = SQLiteOperations.INSTANCE.del_user("Bob1");
            assertEquals(0, result);

            result = SQLiteOperations.INSTANCE.change_psw("sadf", "123");
            assertEquals(-1, result);

            result = SQLiteOperations.INSTANCE.update_user_details("123", "0421314124", "hi@gmail.com", "Bob", "Basob1", "1234");
            assertEquals(1, result);

            List<String> result_array = SQLiteOperations.INSTANCE.all_users_usernames();
            assertNull(result_array);

            result = SQLiteOperations.INSTANCE.get_user_uploads("123");
            assertEquals(-1, result);

            result = SQLiteOperations.INSTANCE.get_user_downloads("123");
            assertEquals(-1, result);

            String string_result = SQLiteOperations.INSTANCE.get_user_id("Bob1");
            assertNull(string_result);

            result_array = SQLiteOperations.INSTANCE.get_user_details("123");
            assertNull(result_array);

            string_result = SQLiteOperations.INSTANCE.user_login("Bob1", "1234");
            assertNull(string_result);

            result = SQLiteOperations.INSTANCE.insert_scroll("test", "5", test_path, "20/10/2024", "test_psw");
            assertEquals(-2, result);

            result = SQLiteOperations.INSTANCE.del_scroll("hi");
            assertEquals(0, result);

            result_array = SQLiteOperations.INSTANCE.get_scroll_titles();
            assertNull(result_array);

            result_array = SQLiteOperations.INSTANCE.get_scroll_history_titles();
            assertNull(result_array);

            result_array = SQLiteOperations.INSTANCE.get_scroll_titles_filter("title", "hi");
            assertNull(result_array);

            string_result = SQLiteOperations.INSTANCE.get_scroll_content("hi");
            assertNull(string_result);

            byte[] result_bytes = SQLiteOperations.INSTANCE.get_scroll_content_as_bytes("hi");
            assertNull(result_bytes);

            SQLiteOperations.INSTANCE.set_new_scroll_day();
            SQLiteOperations.INSTANCE.set_scroll_day("sdfasdf");
            string_result = SQLiteOperations.INSTANCE.get_creatorid("hi");
            assertNull(string_result);

            string_result = SQLiteOperations.INSTANCE.get_scroll_of_day();
            assertNull(string_result);

            result = SQLiteOperations.INSTANCE.update_scroll_content("hi", "hihihi");
            assertEquals(-1, result);

            result = SQLiteOperations.INSTANCE.increment_downloads("hi", "5");
            assertEquals(-2, result);

            result = SQLiteOperations.INSTANCE.increment_downloads("blob", "psw");
            assertEquals(-2, result);

            string_result = SQLiteOperations.INSTANCE.get_scroll_psw("blob");
            assertNull(string_result);

            result = SQLiteOperations.INSTANCE.get_scroll_uploads("hi");
            assertEquals(-1, result);

            result = SQLiteOperations.INSTANCE.get_scroll_downloads("hi");
            assertEquals(-1, result);

            result = SQLiteOperations.INSTANCE.access_scroll_psw("blob", "psw");
            assertEquals(-2, result);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    void test_creatoreid_missing_scroll() {
        String string_result = SQLiteOperations.INSTANCE.get_creatorid("sdfasdf");
        assertNull(string_result);
    }

    @Test
    void test_wrong_date_format() {
        Date result = SQLiteOperations.INSTANCE.convertJavaDateToSQL("wrong");
        assertNull(result);
    }

    @Test
    void test_connect() {
        Date result = SQLiteOperations.INSTANCE.convertJavaDateToSQL("wrong");
        assertNull(result);
    }

    @Test
    void test_set_scroll_no_free() {
        SQLiteOperations.INSTANCE.del_scroll("hi");
        SQLiteOperations.INSTANCE.del_scroll("scrolls");

        SQLiteOperations.INSTANCE.set_new_scroll_day();
        assertNull(SQLiteOperations.INSTANCE.get_scroll_of_day());

        SQLiteOperations.INSTANCE.insert_scroll("test", "5", test_path, "20/10/2024", "test_psw");
        SQLiteOperations.INSTANCE.set_scroll_day("test");

        assertEquals("test", SQLiteOperations.INSTANCE.get_scroll_of_day());
    }

    @Test
    void test_get_content_missing() {
        String result = SQLiteOperations.INSTANCE.get_scroll_content("test");
        assertNull(result);

        byte[] result_bytes = SQLiteOperations.INSTANCE.get_scroll_content_as_bytes("test");
        assertNull(result_bytes);
    }

}